import net.researchgate.release.cli.Executor

plugins {
  id 'java-library'
  id 'groovy'
  id 'maven'
  id 'jacoco'
  id 'checkstyle'
  id 'com.jfrog.bintray' version '1.8.4'
  id 'maven-publish'
  id 'com.adarshr.test-logger' version '1.6.0'
  id 'net.researchgate.release' version '2.8.0'
  id 'org.sonarqube' version '2.7'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {
  annotationProcessor 'org.projectlombok:lombok:1.18.4'
  compileOnly 'org.projectlombok:lombok:1.18.4'

  compile 'io.vavr:vavr:0.10.0'

  compile 'com.fasterxml.jackson.core:jackson-core:2.9.8'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
  compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.8'
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.8'
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'

  // Test
  testImplementation 'org.codehaus.groovy:groovy-all:2.5.6'
  testImplementation 'org.spockframework:spock-core:1.2-groovy-2.5'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.4'
  testCompileOnly 'org.projectlombok:lombok:1.18.4'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.1'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.1'
  testCompile 'org.skyscreamer:jsonassert:1.5.0'
}

jar {
  archiveBaseName = 'marqeta-webhooks-models'
}

task spockTest(type: Test, description: 'Runs tests written in Spock.', group: LifecycleBasePlugin.VERIFICATION_GROUP) {
  useJUnit()
}

test.finalizedBy jacocoTestReport

ext {
  jacocoMergedReport = file("$buildDir/jacoco/mergeTest.exec")
}

task jacocoMergeTestReport(type: JacocoMerge) {
  executionData tasks.withType(Test)
  destinationFile = jacocoMergedReport
}

jacocoTestReport {
  dependsOn jacocoMergeTestReport
  executionData jacocoMergedReport
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
    html.destination file("${buildDir}/reports/jacocoHtml")
  }
}

// CHECKSTYLE
checkstyleMain.source = "src/main/java"
checkstyleTest.source = "src/test/java"

ext {
  isCIEnv = System.getenv('CI') != null
  isCIAndDevelopBranch = 'develop' == System.getenv('CIRCLE_BRANCH') ?: ''
  sonarHostUrl = 'https://sonarcloud.io'
  sonarLogin = System.getenv('SONAR_LOGIN')
  sonarProjectKey = 'gilbertotcc_marqeta-webhooks-models'
  sonarOrganization = 'gilbertotcc-github'
  testSources = 'src/test/groovy'
  jacocoMergedReport = file("$buildDir/jacoco/mergeTest.exec")
  generatedTestSourcesDir = 'generated-test-sources'
}

sonarqube {
  properties {
    property 'sonar.host.url', sonarHostUrl
    property 'sonar.projectKey', sonarProjectKey
    property 'sonar.organization', sonarOrganization
    property 'sonar.login', sonarLogin
    property 'sonar.jacoco.reportPath', jacocoMergedReport
    property 'sonar.tests', testSources
    property 'sonar.test.exclusions', "**/${generatedTestSourcesDir}/**/*.java"
  }
}

def sonarqubeTask = project.tasks["sonarqube"]

sonarqubeTask.enabled = isCIAndDevelopBranch

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
    }
  }
}

release {
  preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit [skip ci]: '
  newVersionCommitMessage = '[Gradle Release Plugin] - new version commit [skip ci]: '
}

afterReleaseBuild.dependsOn bintrayUpload

commitNewVersion {
  doLast {
    logger.info("Merging and pushing branch 'master' to 'develop' after release.")
    def executor = new Executor(project.logger)
    def workingDirectory = project.rootDir
    def toBranch = 'develop'
    executor.exec(['git', 'fetch'], directory: workingDirectory, errorPatterns: ['error: ', 'fatal: '])
    executor.exec(['git', 'checkout', toBranch], directory: workingDirectory, errorPatterns: ['error: ', 'fatal: '])
    executor.exec(['git', 'merge', '--no-ff', 'master'], directory: workingDirectory, errorPatterns: ['error: ', 'fatal: ', 'CONFLICT'])
    executor.exec(['git', 'push', '--porcelain', 'origin', 'develop'], directory: workingDirectory, errorMessage: "Failed to push to 'develop' branch after 'master' was merged.", errorPatterns: ['[rejected]', 'error: ', 'fatal: '])
    executor.exec(['git', 'checkout', 'master'], directory: workingDirectory, errorPatterns: ['error: ', 'fatal: '])
  }
}

bintray {
  user = System.getenv('BINTRAY_USERNAME')
  key = System.getenv('BINTRAY_API_KEY')
  publish = true
  publications = ['maven']
  pkg {
    repo = 'marqeta'
    name = 'marqeta-webhooks-models'
    desc = 'Java library which models the event types sent by webhooks in the Marqeta platform'
    licenses = ['MIT']
    websiteUrl = 'https://github.com/gilbertotcc/marqeta-webhooks-models'
    vcsUrl = 'https://github.com/gilbertotcc/marqeta-webhooks-models.git'
    githubRepo = 'gilbertotcc/marqeta'
    githubReleaseNotesFile = 'README.md'
    issueTrackerUrl = 'https://github.com/gilbertotcc/marqeta-webhooks-models/issues'
  }
}
